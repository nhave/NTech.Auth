@using OpenIddict.EntityFrameworkCore.Models
@inject OpenIddictService OpenIddictService

<div class="nt-grid-container">
    <Grid @ref="grid"
          TItem="ApplicationModel"
          Class="table table-hover table-bordered m-0"
          GridContainerClass="mb-3"
          HeaderRowCssClass="bg-body-tertiary text-nowrap"
          RowClass="GetRowClass"
          DataProvider="ApplicationsDataProvider"
          AllowPaging="true"
          AllowSorting="true"
          PageSize="10"
          PageSizeSelectorVisible="true"
          PageSizeSelectorItems="@(new int[] { 5,10,20 })"
          Responsive="true"
          EmptyText="No records to display">

        <GridColumns>
            <GridColumn TItem="ApplicationModel" HeaderText="Name" SortKeySelector="@(item => item.DisplayName)" TextNoWrap="true">
                @context.DisplayName
                <a href="edit/application/@context.Id" class="stretched-link"></a>
            </GridColumn>
            <GridColumn TItem="ApplicationModel" HeaderText="Client Id" SortKeySelector="@(item => item.ClientId)" TextNoWrap="true">
                @context.ClientId
            </GridColumn>
            <GridColumn TItem="ApplicationModel" HeaderText="Client Type" SortKeySelector="@(item => item.ClientType)" TextNoWrap="true">
                @context.ClientType
            </GridColumn>
        </GridColumns>
    </Grid>
</div>

@code {
    Grid<ApplicationModel> grid = default!;
    private List<ApplicationModel> applications = default!;

    private async Task<GridDataProviderResult<ApplicationModel>> ApplicationsDataProvider(GridDataProviderRequest<ApplicationModel> request)
    {
        if (applications is null)
            applications = await OpenIddictService.GetApplicationsAsync();

        return await Task.FromResult(request.ApplyTo(applications));
    }

    private string GetRowClass(ApplicationModel application)
    {
        return "position-relative bg-body-tertiary bg-opacity-50";
    }
}
